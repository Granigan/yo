import chain from './lib/chain';
import lazyChain from './lib/lazychain';
import match from './lib/match';
import mathChain from './lib/mathchain';
import {
  noop,
  uniqueId,
  negate,
  min,
  max,
  gt,
  gte,
  lt,
  lte,
  between,
  nthArg,
  firstArg,
  restArg,
  lastArg,
  error,
  debounce,
  throttle,
  curry,
  random,
  memoize,
  exportModule,
  callFunctor,
  pipe,
  pipeRight,
  always,
  never,
  passthru,
  now,
  greatestCommonDivisor,
  booleanToInt,
  once,
  after,
  before,
  wrap,
  fibonacci,
  fizzbuzz,
  smallFizzbuzz,
  kitten,
  reservedWords,
  $,
  css,
  missingNumber,
  findLargestSum
} from './lib/function';
import {
  firstKey,
  firstValue,
  keys,
  values,
  forIn,
  extend,
  reverseObject,
  zipObject,
  invert,
  get,
  arrayToObject,
  findKey,
  listMethods,
  methodCount
} from './lib/object';
import {
  uppercase,
  lowercase,
  capitalize,
  trim,
  removeSubstrings,
  everyNthWord,
  everyNthLetter,
  wordCount,
  words,
  letters,
  splitBy,
  reverseWords,
  reverseInPlace
} from './lib/string';
import {
  nth,
  first,
  rest,
  concat,
  chunk,
  slice,
  splice,
  reduce,
  reduceRight,
  reverse,
  times,
  size,
  shuffle,
  sample,
  sampleSize,
  difference,
  map,
  pluck,
  fill,
  repeat,
  partition,
  indexOf,
  contains,
  range,
  flatten,
  each,
  union,
  findDuplicates,
  skipDuplicates,
  find,
  drop,
  dropRight,
  filter,
  reject,
  lastOfTheLastOfTheLast,
  merge,
  clone,
  mergeAndSort,
  duplicate,
  flip,
  toArray,
  compact,
  matches,
  where,
  every,
  some,
  none,
  findLargestSubArrayBySum,
  findPairsBySum,
  zip,
  pairs,
  binarySearch,
  previous,
  next,
  last,
  initial,
  head,
  tail,
  everyNth,
  pick,
  omit,
  permutations
} from './lib/array';
import {
  isBoolean,
  isNull,
  isUndefined,
  isDefined,
  isString,
  isObject,
  isFunction,
  isEmpty,
  isNumber,
  isPositive,
  isNegative,
  isFloat,
  isArray,
  isPrime,
  isEqual,
  isEven,
  isOdd,
  isFalsey,
  isTruthy,
  isPalindrome
} from './lib/is';
import {
  add,
  addSelf,
  subtract,
  multiply,
  divide,
  sum,
  mean,
  factorial,
  primeNumbers
} from './lib/math';

export default {
  isFinite: n => isNumber(n) && Number.isFinite(n),
  parseInt: (n, radix = 10) => parseInt(n, radix),
  length: size,
  chain,
  lazyChain,
  match,
  mathChain,
  noop,
  uniqueId,
  negate,
  min,
  max,
  gt,
  gte,
  lt,
  lte,
  between,
  nthArg,
  firstArg,
  restArg,
  lastArg,
  error,
  debounce,
  throttle,
  curry,
  random,
  memoize,
  exportModule,
  callFunctor,
  pipe,
  pipeRight,
  always,
  never,
  passthru,
  now,
  greatestCommonDivisor,
  booleanToInt,
  once,
  after,
  before,
  wrap,
  fibonacci,
  fizzbuzz,
  smallFizzbuzz,
  kitten,
  reservedWords,
  $,
  css,
  missingNumber,
  findLargestSum,
  firstKey,
  firstValue,
  keys,
  values,
  forIn,
  extend,
  reverseObject,
  zipObject,
  invert,
  get,
  arrayToObject,
  findKey,
  listMethods,
  methodCount,
  uppercase,
  lowercase,
  capitalize,
  trim,
  removeSubstrings,
  everyNthWord,
  everyNthLetter,
  wordCount,
  words,
  letters,
  splitBy,
  reverseWords,
  reverseInPlace,
  nth,
  first,
  rest,
  concat,
  chunk,
  slice,
  splice,
  reduce,
  reduceRight,
  reverse,
  times,
  size,
  shuffle,
  sample,
  sampleSize,
  difference,
  map,
  pluck,
  fill,
  repeat,
  partition,
  indexOf,
  contains,
  range,
  flatten,
  each,
  union,
  findDuplicates,
  skipDuplicates,
  find,
  drop,
  dropRight,
  filter,
  reject,
  lastOfTheLastOfTheLast,
  merge,
  clone,
  mergeAndSort,
  duplicate,
  flip,
  toArray,
  compact,
  matches,
  where,
  every,
  some,
  none,
  findLargestSubArrayBySum,
  findPairsBySum,
  zip,
  pairs,
  binarySearch,
  previous,
  next,
  last,
  initial,
  head,
  tail,
  everyNth,
  pick,
  omit,
  permutations,
  isBoolean,
  isNull,
  isUndefined,
  isDefined,
  isString,
  isObject,
  isFunction,
  isEmpty,
  isNumber,
  isPositive,
  isNegative,
  isFloat,
  isArray,
  isPrime,
  isEqual,
  isEven,
  isOdd,
  isFalsey,
  isTruthy,
  isPalindrome,
  add,
  addSelf,
  subtract,
  multiply,
  divide,
  sum,
  mean,
  factorial,
  primeNumbers
};
